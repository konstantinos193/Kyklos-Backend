const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
  // Human-friendly student identifier used for login (e.g., S12345)
  studentId: {
    type: String,
    unique: true,
    sparse: true,
    trim: true,
  },
  // Unique key generated by server (e.g., "STU-2024-001", "STU-ATH-2024-001")
  uniqueKey: {
    type: String,
    required: true,
    unique: true,
    uppercase: true
  },
  
  // Personal information
  firstName: {
    type: String,
    required: true,
    trim: true,
    maxlength: 50
  },
  lastName: {
    type: String,
    required: true,
    trim: true,
    maxlength: 50
  },
  
  // Contact information
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  },
  phone: {
    type: String,
    required: true,
    trim: true,
    match: [/^(\+30|0030)?[0-9]{10}$/, 'Please enter a valid Greek phone number']
  },
  
  // Academic information
  grade: {
    type: String,
    required: true,
    enum: ['Γ Λυκείου', 'Β Λυκείου', 'Α Λυκείου', 'Γ Γυμνασίου', 'Β Γυμνασίου', 'Α Γυμνασίου']
  },
  school: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  
  // Course preferences
  subjects: [{
    type: String,
    enum: [
      'Ελληνική Γλώσσα',
      'Αρχαία Ελληνικά', 
      'Λατινικά',
      'Ιστορία',
      'Φιλοσοφία',
      'Μαθηματικά',
      'Φυσική',
      'Χημεία',
      'Βιολογία',
      'Οικονομικά',
      'Πληροφορική'
    ]
  }],
  
  // Status and dates
  status: {
    type: String,
    enum: ['active', 'inactive', 'graduated', 'suspended'],
    default: 'active'
  },
  
  registrationDate: {
    type: Date,
    default: Date.now
  },
  
  lastLogin: {
    type: Date
  },
  
  // Additional information
  notes: {
    type: String,
    maxlength: 500,
    trim: true
  },
  
  // Parent/Guardian information
  parentName: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  parentPhone: {
    type: String,
    required: true,
    trim: true,
    match: [/^(\+30|0030)?[0-9]{10}$/, 'Please enter a valid Greek phone number']
  },
  parentEmail: {
    type: String,
    lowercase: true,
    trim: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Virtual for full name
studentSchema.virtual('fullName').get(function() {
  return `${this.firstName} ${this.lastName}`;
});

// Virtual for display name
studentSchema.virtual('displayName').get(function() {
  return `${this.firstName} ${this.lastName.charAt(0)}.`;
});

// Index for better query performance
studentSchema.index({ status: 1 });
studentSchema.index({ grade: 1 });

// Pre-save middleware to ensure uniqueKey is uppercase
studentSchema.pre('save', function(next) {
  if (this.uniqueKey) {
    this.uniqueKey = this.uniqueKey.toUpperCase();
  }
  next();
});

module.exports = mongoose.model('Student', studentSchema);
